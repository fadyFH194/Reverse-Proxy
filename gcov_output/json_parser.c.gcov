        -:    0:Source:src/json_parser.c
        -:    0:Graph:build/json_parser.gcno
        -:    0:Data:build/json_parser.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "json_parser.h"
        -:    2:#include <string.h>
        -:    3:#include <stdio.h>
        -:    4:
        7:    5:static int extract_json_string(const char *json, const char *key, char *out, size_t out_size) {
        -:    6:    char key_str[256];
        7:    7:    snprintf(key_str, sizeof(key_str), "\"%s\"", key);
        7:    8:    char *start = strstr((char*)json, key_str);
        7:    9:    if (!start) return -1;
        6:   10:    start = strchr(start, ':');
        6:   11:    if (!start) return -1;
        -:   12:
        -:   13:    // Move past colon and spaces
       22:   14:    while (*start && (*start == ':' || *start == ' ' || *start == '\t'))
       10:   15:        start++;
        -:   16:
        6:   17:    if (*start == '\"') start++;
        -:   18:
        6:   19:    char *end = strchr(start, '\"');
        6:   20:    if (!end) return -1;
        6:   21:    size_t len = end - start;
        6:   22:    if (len + 1 > out_size) return -1;
        6:   23:    strncpy(out, start, len);
        6:   24:    out[len] = '\0';
        6:   25:    return 0;
        7:   26:}
        -:   27:
        3:   28:static int extract_json_int(const char *json, const char *key, int *val) {
        -:   29:    char key_str[256];
        3:   30:    snprintf(key_str, sizeof(key_str), "\"%s\"", key);
        3:   31:    char *start = strstr((char*)json, key_str);
        3:   32:    if (!start) return -1;
        3:   33:    start = strchr(start, ':');
        3:   34:    if (!start) return -1;
        -:   35:
        -:   36:    // Move past colon and spaces
       11:   37:    while (*start && (*start == ':' || *start == ' ' || *start == '\t'))
        5:   38:        start++;
        -:   39:
        3:   40:    if (sscanf(start, "%d", val) != 1)
        1:   41:        return -1;
        2:   42:    return 0;
        3:   43:}
        -:   44:
        4:   45:int parse_json_for_route(const char *json, char *prefix, size_t prefix_size, char *host, size_t host_size, int *port) {
        4:   46:    if (extract_json_string(json, "prefix", prefix, prefix_size) < 0) return -1;
        3:   47:    if (extract_json_string(json, "host", host, host_size) < 0) return -1;
        3:   48:    if (extract_json_int(json, "port", port) < 0) return -1;
        -:   49:
        2:   50:    return 0;
        4:   51:}
